{"version":3,"sources":["actions.js","containers/AddTodo.js","components/Todo.js","containers/VisibleTodoList.js","components/TodoList.js","containers/FilterLink.js","components/Link.js","components/Filters.js","components/App.js","serviceWorker.js","redusers.js","index.js"],"names":["nextTodoId","ADD_TODO","TOGGLE_TODO","DELETE_TODO","SET_VISIBILITY_FILTER","VisibilityFilters","connect","dispatch","onSubmit","event","preventDefault","input","target","text","value","trim","type","payload","id","done","name","Todo","onTodoClick","onDeleteClick","onClick","bind","getFilteredList","todos","filter","t","Error","VisibleTodoList","state","visibilityFilter","toggleTodo","deleteTodo","map","todo","key","ownProps","active","onFilterClick","children","disabled","Filter","FilterLink","App","className","Boolean","window","location","hostname","match","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0106058.chunk.js","sourcesContent":["let nextTodoId = 0;\r\n\r\nexport const addTodo = (text) => ({\r\n    type: ADD_TODO,\r\n    payload: {\r\n        id: ++nextTodoId,\r\n        text: text,\r\n        done: false\r\n    }\r\n})\r\n\r\nexport const toggleTodo = (id) => ({\r\n    type: TOGGLE_TODO,\r\n    payload: id\r\n})\r\n\r\nexport const deleteTodo = (id) => ({\r\n    type: DELETE_TODO,\r\n    payload: id\r\n})\r\n\r\nexport const setVisibilityFilter = (filter) => ({\r\n    type: SET_VISIBILITY_FILTER,\r\n    payload: filter\r\n})\r\n\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\n\r\nexport const VisibilityFilters = {\r\n    SHOW_ALL: \"SHOW_ALL\",\r\n    SHOW_ACTIVE: \"SHOW_ACTIVE\",\r\n    SHOW_DONE: \"SHOW_DONE\",\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodo} from \"../actions\"\r\n\r\nconst AddTodo = ({dispatch}) => {\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        const input = event.target.text;\r\n        const value = input.value.trim();\r\n\r\n        value && dispatch(addTodo(value));\r\n        input.value = '';\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmitHandler}>\r\n            <input name=\"text\" type=\"text\"/>\r\n            <button type=\"submit\">+</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default connect()(AddTodo);\r\n","import React from \"react\";\r\n\r\nexport const Todo = ({id, text, done, onTodoClick, onDeleteClick}) => (\r\n    <li>\r\n    {done && <span>+ </span>}\r\n        <button type=\"button\"\r\n                onClick={onTodoClick.bind(null, id)}>\r\n            {text}\r\n        </button>\r\n        <button type=\"button\"\r\n                onClick={onDeleteClick.bind(null, id)}\r\n        >\r\n                &#128465;\r\n        </button>\r\n    </li>\r\n)\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {TodoList} from \"../components/TodoList\";\r\nimport {deleteTodo, toggleTodo, VisibilityFilters} from \"../actions\";\r\n\r\nconst getFilteredList = (todos, filter) => {\r\n    switch (filter) {\r\n        case VisibilityFilters.SHOW_ALL:\r\n            return todos;\r\n        case VisibilityFilters.SHOW_DONE:\r\n            return todos.filter(t => t.done);\r\n        case VisibilityFilters.SHOW_ACTIVE:\r\n            return todos.filter(t => !t.done);\r\n        default:\r\n            throw new Error('Unknown filter: ' + filter)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: getFilteredList(state.todos, state.visibilityFilter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onTodoClick: id => dispatch(toggleTodo(id)),\r\n    onDeleteClick: id => dispatch(deleteTodo(id))\r\n})\r\n\r\nconst VisibleTodoList = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList);\r\n\r\nexport default VisibleTodoList;\r\n","import React from \"react\";\r\nimport {Todo} from \"./Todo\";\r\n\r\nexport const TodoList = ({todos, onTodoClick, onDeleteClick}) => {\r\n    debugger\r\n\r\n    return (\r\n        <ul>\r\n            {todos.map((todo) => (\r\n                <Todo key={todo.id}\r\n                      {...todo}\r\n                      onTodoClick={onTodoClick}\r\n                      onDeleteClick={onDeleteClick}\r\n                />\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"../components/Link\";\r\nimport {connect} from \"react-redux\";\r\nimport {setVisibilityFilter} from \"../actions\";\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    active: ownProps.filter === state.visibilityFilter\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    onFilterClick: () => dispatch(setVisibilityFilter(ownProps.filter))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Link)\r\n","import React from \"react\";\r\n\r\nexport const Link = ({children, active, onFilterClick}) => (\r\n    <button type=\"button\" onClick={onFilterClick} disabled={active}>{children}</button>\r\n)\r\n","import React from \"react\";\r\nimport FilterLink from \"../containers/FilterLink\";\r\nimport {VisibilityFilters} from \"../actions\";\r\n\r\nexport const Filter = () => (\r\n    <div>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>\r\n            All\r\n        </FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\r\n            Active\r\n        </FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_DONE}>\r\n            Done\r\n        </FilterLink>\r\n    </div>\r\n)\r\n","import React from \"react\";\nimport AddTodo from \"../containers/AddTodo\";\nimport VisibleTodoList from \"../containers/VisibleTodoList\";\nimport {Filter} from \"./Filters\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AddTodo/>\n      <VisibleTodoList/>\n      <Filter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport {ADD_TODO, DELETE_TODO, TOGGLE_TODO} from \"./actions\";\r\nimport {SET_VISIBILITY_FILTER, VisibilityFilters} from \"./actions\"\r\n\r\nconst initialState = [];\r\n\r\nconst todos = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [...state, action.payload];\r\n            break;\r\n        case DELETE_TODO:\r\n            return state.filter((todo) => {\r\n                return !(todo.id === action.payload);\r\n            });\r\n            break;\r\n        case TOGGLE_TODO:\r\n            return state.map((todo) => {\r\n                if (todo.id === action.payload) {\r\n                    return {\r\n                        ...todo,\r\n                        done: !todo.done\r\n                    }\r\n                }\r\n\r\n                return todo;\r\n            });\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n    switch (action.type) {\r\n        case SET_VISIBILITY_FILTER:\r\n            return action.payload;\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    visibilityFilter\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from \"redux\";\nimport rootReducer from \"./redusers\";\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}